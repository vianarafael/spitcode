[
  {
    "category": "best_practices",
    "issue": "Lack of Proper Password Hashing",
    "impact": null,
    "fix": "Use a cryptographic library like `bcrypt` or `argon2` for hashing and verification."
  },
  {
    "category": "best_practices",
    "issue": "Insecure JWT Configuration",
    "impact": null,
    "fix": "Use `algorithm=\"HS256\"` and ensure the key is securely stored."
  },
  {
    "category": "best_practices",
    "issue": "Missing Imports",
    "impact": null,
    "fix": "Add `import jwt` to the imports."
  },
  {
    "category": "best_practices",
    "issue": "No Rate Limiting",
    "impact": null,
    "fix": "Implement rate limiting using FastAPI's `Depends` or a middleware like `slowapi`."
  },
  {
    "category": "best_practices",
    "issue": "No Input Validation",
    "impact": null,
    "fix": "Use Pydantic models for request validation and parameterized SQL queries."
  },
  {
    "category": "best_practices",
    "issue": "Missing Error Handling",
    "impact": null,
    "fix": "Wrap database calls in `try/except` blocks and return appropriate HTTP responses."
  },
  {
    "category": "best_practices",
    "issue": "Poor Dependency Management",
    "impact": null,
    "fix": "Use `Depends` to manage database connections as a dependency."
  },
  {
    "category": "security",
    "issue": "Insecure JWT",
    "impact": "Tokens can be forged if the secret is compromised.",
    "fix": "Use a strong key and explicitly set the algorithm."
  },
  {
    "category": "security",
    "issue": "SQLite Limitations",
    "impact": null,
    "fix": "Use a production-ready database (e.g., PostgreSQL, MySQL) for scalability."
  },
  {
    "category": "security",
    "issue": "No Refresh Tokens",
    "impact": "Users must re-authenticate frequently.",
    "fix": "Implement refresh tokens with secure storage (e.g., encrypted cookies)."
  },
  {
    "category": "security",
    "issue": "No HTTPS Enforcement",
    "impact": null,
    "fix": "Enforce HTTPS using middleware or a reverse proxy (e.g., Nginx)."
  },
  {
    "category": "modularity",
    "issue": "Use FastAPI Dependencies",
    "impact": null,
    "fix": "Example:"
  },
  {
    "category": "modularity",
    "issue": "Template Management",
    "impact": null,
    "fix": "Use a `templates/` directory and configure FastAPI to use Jinja2 or another templating engine."
  },
  {
    "category": "modularity",
    "issue": "Environment Variables",
    "impact": null,
    "fix": "Use `python-dotenv` to load environment variables."
  },
  {
    "category": "modularity",
    "issue": "Logging and Monitoring",
    "impact": null,
    "fix": "Add logging using `logging` or a third-party library (e.g., `uvicorn` for logs)."
  },
  {
    "category": "modularity",
    "issue": "Unit Testing",
    "impact": null,
    "fix": "Use `pytest` and `pytest-asyncio` for testing async code."
  }
]